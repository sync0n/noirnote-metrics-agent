======== install-agent.sh ========
#!/bin/bash

set -e # Exit immediately if a command exits with a non-zero status.

echo "--- NoirNote Agent Installer (Robust Version) ---"

# --- Configuration ---
AGENT_USER="noirnote-agent"
AGENT_DIR="/opt/noirnote-agent"
CONFIG_DIR="/etc/noirnote"
AGENT_SERVICE_FILE="/etc/systemd/system/noirnote-agent.service"
AGENT_SCRIPT_PATH="${AGENT_DIR}/noirnote_agent.py"
KEY_FILE_PATH="${CONFIG_DIR}/agent-key.json"
CONFIG_FILE_PATH="${CONFIG_DIR}/agent.conf"
FUNCTION_URL="https://us-central1-noirnote.cloudfunctions.net/ingestMetrics"

# --- Helper Functions ---
function check_root() {
    if [ "$EUID" -ne 0 ]; then
      echo "Error: This installer must be run with sudo or as root."
      exit 1
    fi
}

function install_dependencies() {
    echo "--> [1/5] Installing dependencies (python3, pip, psutil, google-auth)..."
    if ! command -v apt-get &> /dev/null; then
        echo "Error: apt-get not found. This script is designed for Debian-based systems (Debian, Ubuntu)."
        exit 1
    fi
    apt-get update
    apt-get install -y python3 python3-pip
    pip3 install psutil google-auth requests
}

function setup_agent_user_and_dirs() {
    echo "--> [2/5] Setting up user and directories..."
    if ! id -u "$AGENT_USER" >/dev/null 2>&1; then
        useradd --system --shell /usr/sbin/nologin "$AGENT_USER"
        echo "    - Created system user '$AGENT_USER'"
    else
        echo "    - System user '$AGENT_USER' already exists."
    fi
    
    mkdir -p "$AGENT_DIR"
    mkdir -p "$CONFIG_DIR"
    chown -R "$AGENT_USER":"$AGENT_USER" "$AGENT_DIR"
    chown -R "$AGENT_USER":"$AGENT_USER" "$CONFIG_DIR"
    chmod 750 "$AGENT_DIR"
    chmod 750 "$CONFIG_DIR"
}

function create_agent_script() {
    echo "--> [3/5] Creating agent script at ${AGENT_SCRIPT_PATH}..."
    # The agent code will be placed here.
    tee "$AGENT_SCRIPT_PATH" > /dev/null <<'AGENT_EOF'
# PASTE THE ENTIRE, REFINED CONTENT of your noirnote_agent.py SCRIPT HERE
AGENT_EOF
    chown "$AGENT_USER":"$AGENT_USER" "$AGENT_SCRIPT_PATH"
    chmod 750 "$AGENT_SCRIPT_PATH"
}

function configure_agent() {
    echo ""
    echo "--> [4/5] Configuring agent..."
    echo "    Please paste the entire content of your service account JSON key file."
    echo "    Press Enter, then Ctrl+D when you are finished."
    cat > "$KEY_FILE_PATH"
    chown "$AGENT_USER":"$AGENT_USER" "$KEY_FILE_PATH"
    chmod 400 "$KEY_FILE_PATH" # Make key readable only by the owner.
    echo "    - Service account key saved securely."

    echo ""
    read -p "    Enter a unique name for this server (e.g., web-prod-01): " SERVER_ID
    
    echo "SERVER_ID=$SERVER_ID" > "$CONFIG_FILE_PATH"
    echo "INGEST_FUNCTION_URL=$FUNCTION_URL" >> "$CONFIG_FILE_PATH"
    echo "INTERVAL_SECONDS=60" >> "$CONFIG_FILE_PATH"
    chown "$AGENT_USER":"$AGENT_USER" "$CONFIG_FILE_PATH"
    chmod 640 "$CONFIG_FILE_PATH"
    echo "    - Configuration file created."
}

function setup_service() {
    echo "--> [5/5] Setting up and starting systemd service..."
    tee "$AGENT_SERVICE_FILE" > /dev/null <<'SERVICE_EOF'
[Unit]
Description=NoirNote Metrics Agent
After=network-online.target
Wants=network-online.target

[Service]
Type=simple
User=noirnote-agent
Group=noirnote-agent
ExecStart=/usr/bin/python3 /opt/noirnote-agent/noirnote_agent.py
Restart=on-failure
RestartSec=10

[Install]
WantedBy=multi-user.target
SERVICE_EOF
    
    systemctl daemon-reload
    systemctl enable noirnote-agent.service
    systemctl start noirnote-agent.service
    
    echo ""
    echo "--- Installation Complete! ---"
    echo "The NoirNote agent is now running."
    echo "To check its status, run: systemctl status noirnote-agent.service"
    echo "To view live logs, run:    journalctl -u noirnote-agent.service -f"
}

# --- Main Execution ---
check_root
install_dependencies
setup_agent_user_and_dirs
create_agent_script
configure_agent
setup_service

======== noirnote_agent.py ========
# agent/noirnote_agent.py
import psutil
import requests
import json
import time
import os
from google.oauth2 import service_account
from google.auth.transport.requests import AuthorizedSession

# --- Configuration ---
# These will be read from a config file
CONFIG_FILE_PATH = "/etc/noirnote/agent.conf"
KEY_FILE_PATH = "/etc/noirnote/agent-key.json"

def load_config():
    """Loads agent configuration from the config file."""
    config = {}
    with open(CONFIG_FILE_PATH, 'r') as f:
        for line in f:
            key, value = line.strip().split('=')
            config[key.strip()] = value.strip()
    return config

def get_authenticated_session(key_path, target_audience):
    """
    Creates an authorized session that can invoke a secured Cloud Function.

    This function uses the service account key to generate a short-lived,
    OIDC-compliant ID token, which is the standard and secure way to
    authenticate to a Cloud Function secured by IAM.
    """
    try:
        # Create credentials from the service account file.
        creds = service_account.IDTokenCredentials.from_service_account_file(
            key_path,
            target_audience=target_audience
        )
        
        # Create a transport request object to handle token refreshes automatically.
        authed_session = google.auth.transport.requests.Request()
        
        # The credentials object will now manage generating and caching the ID token.
        creds.refresh(authed_session)
        
        # Return the credentials and the session object for making requests.
        return creds, authed_session

    except FileNotFoundError:
        print(f"FATAL: Service account key file not found at '{key_path}'.")
        raise
    except Exception as e:
        print(f"FATAL: Could not create authenticated session. Error: {e}")
        raise

def collect_metrics():
    """Gathers system metrics using psutil."""
    return {
        "cpu_percent": psutil.cpu_percent(interval=1),
        "memory_percent": psutil.virtual_memory().percent,
        "disk_percent": psutil.disk_usage('/').percent
    }

if __name__ == "__main__":
    print("Starting NoirNote Metrics Agent...")
    try:
        config = load_config()
        # Pass the key file path and the function URL (as the 'audience')
        credentials, authed_session = get_authenticated_session(KEY_FILE_PATH, config['INGEST_FUNCTION_URL'])
    except Exception as e:
        # The error is already printed inside the function, just exit.
        exit(1)
        
    print(f"Agent configured for server_id: {config['SERVER_ID']}")
    
    while True:
        try:
            metrics = collect_metrics()
            payload = {
                "server_id": config['SERVER_ID'],
                "metrics": metrics
            }
            
            # --- THIS IS THE KEY CHANGE ---
            # The credentials object provides the necessary 'Authorization' header.
            headers = {
                'Authorization': f'Bearer {credentials.token}',
                'Content-Type': 'application/json'
            }
            
            print(f"Pushing metrics: {payload}")
            response = requests.post(config['INGEST_FUNCTION_URL'], json=payload, headers=headers, timeout=15)
            # --- END CHANGE ---
            
            response.raise_for_status()
            print(f"Successfully pushed metrics. Status: {response.status_code}")

        except Exception as e:
            print(f"ERROR: Failed to collect or push metrics: {e}")
        
        time.sleep(int(config.get('INTERVAL_SECONDS', 60)))

