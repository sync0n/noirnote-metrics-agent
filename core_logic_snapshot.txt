======== install-agent.sh ========
#!/bin/bash

set -e # Exit immediately if a command exits with a non-zero status.

echo "--- NoirNote Agent Installer (Robust Version) ---"

# --- Configuration ---
AGENT_USER="noirnote-agent"
AGENT_DIR="/opt/noirnote-agent"
CONFIG_DIR="/etc/noirnote"
AGENT_SERVICE_FILE="/etc/systemd/system/noirnote-agent.service"
AGENT_SCRIPT_PATH="${AGENT_DIR}/noirnote_agent.py"
KEY_FILE_PATH="${CONFIG_DIR}/agent-key.json"
CONFIG_FILE_PATH="${CONFIG_DIR}/agent.conf"
FUNCTION_URL="https://europe-west3-noirnote.cloudfunctions.net/ingestMetrics"

# --- Helper Functions ---
function check_root() {
    if [ "$EUID" -ne 0 ]; then
      echo "Error: This installer must be run with sudo or as root."
      exit 1
    fi
}

function install_dependencies() {
    echo "--> [1/5] Installing dependencies via apt..."
    if ! command -v apt-get &> /dev/null; then
        echo "Error: apt-get not found. This script is designed for Debian-based systems (Debian, Ubuntu)."
        exit 1
    fi
    
    # --- THIS IS THE FIX ---
    # Refresh package list and install the Debian/Ubuntu packaged versions of our dependencies.
    # This is the correct way to handle PEP 668-protected environments.
    apt-get update
    apt-get install -y python3-pip python3-psutil python3-requests python3-google-auth
    # --- END FIX ---
}

function setup_agent_user_and_dirs() {
    echo "--> [2/5] Setting up user and directories..."
    if ! id -u "$AGENT_USER" >/dev/null 2>&1; then
        useradd --system --shell /usr/sbin/nologin "$AGENT_USER"
        echo "    - Created system user '$AGENT_USER'"
    else
        echo "    - System user '$AGENT_USER' already exists."
    fi
    
    mkdir -p "$AGENT_DIR"
    mkdir -p "$CONFIG_DIR"
    chown -R "$AGENT_USER":"$AGENT_USER" "$AGENT_DIR"
    chown -R "$AGENT_USER":"$AGENT_USER" "$CONFIG_DIR"
    chmod 750 "$AGENT_DIR"
    chmod 750 "$CONFIG_DIR"
}

function create_agent_script() {
    echo "--> [3/5] Creating agent script at ${AGENT_SCRIPT_PATH}..."
    # The agent code will be placed here.
    tee "$AGENT_SCRIPT_PATH" > /dev/null <<'AGENT_EOF'
# PASTE THE ENTIRE, REFINED CONTENT of your noirnote_agent.py SCRIPT HERE
AGENT_EOF
    chown "$AGENT_USER":"$AGENT_USER" "$AGENT_SCRIPT_PATH"
    chmod 750 "$AGENT_SCRIPT_PATH"
}

function configure_agent() {
    echo ""
    echo "--> [4/5] Configuring agent..."
    echo "    Please paste the entire content of your service account JSON key file."
    echo "    Press Enter, then Ctrl+D when you are finished."
    cat > "$KEY_FILE_PATH"
    chown "$AGENT_USER":"$AGENT_USER" "$KEY_FILE_PATH"
    chmod 400 "$KEY_FILE_PATH" # Make key readable only by the owner.
    echo "    - Service account key saved securely."

    echo ""
    read -p "    Enter a unique name for this server (e.g., web-prod-01): " SERVER_ID
    
    echo "SERVER_ID=$SERVER_ID" > "$CONFIG_FILE_PATH"
    echo "INGEST_FUNCTION_URL=$FUNCTION_URL" >> "$CONFIG_FILE_PATH"
    echo "INTERVAL_SECONDS=60" >> "$CONFIG_FILE_PATH"
    chown "$AGENT_USER":"$AGENT_USER" "$CONFIG_FILE_PATH"
    chmod 640 "$CONFIG_FILE_PATH"
    echo "    - Configuration file created."
}

function setup_service() {
    echo "--> [5/5] Setting up and starting systemd service..."
    tee "$AGENT_SERVICE_FILE" > /dev/null <<'SERVICE_EOF'
[Unit]
Description=NoirNote Metrics Agent
After=network-online.target
Wants=network-online.target

[Service]
Type=simple
User=noirnote-agent
Group=noirnote-agent
ExecStart=/usr/bin/python3 /opt/noirnote-agent/noirnote_agent.py
Restart=on-failure
RestartSec=10

[Install]
WantedBy=multi-user.target
SERVICE_EOF
    
    systemctl daemon-reload
    systemctl enable noirnote-agent.service
    systemctl start noirnote-agent.service
    
    echo ""
    echo "--- Installation Complete! ---"
    echo "The NoirNote agent is now running."
    echo "To check its status, run: systemctl status noirnote-agent.service"
    echo "To view live logs, run:    journalctl -u noirnote-agent.service -f"
}

# --- Main Execution ---
check_root
install_dependencies
setup_agent_user_and_dirs
create_agent_script
configure_agent
setup_service

======== noirnote_agent.py ========
# agent/noirnote_agent.py (DEBUGGING VERSION)
import psutil
import requests
import json
import time
import os
import traceback
from datetime import datetime
from google.oauth2 import service_account
import google.auth.transport.requests

# --- Constants ---
CONFIG_FILE_PATH = "/etc/noirnote/agent.conf"
KEY_FILE_PATH = "/etc/noirnote/agent-key.json"
LOG_FILE_PATH = "/tmp/noirnote_agent.log" # <--- NEW DEBUG LOG

# --- Debug Logging Helper ---
def log_debug(message):
    """Writes a timestamped message to the debug log file."""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S.%f")
    with open(LOG_FILE_PATH, 'a') as f:
        f.write(f"[{timestamp}] {message}\n")

# --- Functions ---
def load_config():
    """Loads agent configuration from the config file."""
    log_debug("Attempting to load config...")
    config = {}
    try:
        with open(CONFIG_FILE_PATH, 'r') as f:
            for line in f:
                if '=' in line:
                    key, value = line.strip().split('=', 1)
                    config[key.strip()] = value.strip()
        log_debug(f"Config loaded successfully: {config}")
        return config
    except FileNotFoundError:
        log_debug(f"FATAL: Configuration file not found at {CONFIG_FILE_PATH}")
        raise
    except Exception as e:
        log_debug(f"FATAL: Error reading configuration file: {e}")
        raise

def get_credentials(key_path, target_audience):
    """Creates and returns ID token credentials from a service account key."""
    log_debug("Attempting to get credentials...")
    try:
        creds = service_account.IDTokenCredentials.from_service_account_file(
            key_path,
            target_audience=target_audience
        )
        log_debug("Credentials object created successfully.")
        return creds
    except FileNotFoundError:
        log_debug(f"FATAL: Service account key file not found at '{key_path}'.")
        raise
    except Exception as e:
        log_debug(f"FATAL: Could not create credentials from key file. Error: {e}")
        raise

def collect_metrics():
    """Gathers system metrics using psutil."""
    log_debug("Collecting metrics...")
    metrics = {
        "cpu_percent": psutil.cpu_percent(interval=1),
        "memory_percent": psutil.virtual_memory().percent,
        "disk_percent": psutil.disk_usage('/').percent
    }
    log_debug(f"Metrics collected: {metrics}")
    return metrics

def main():
    """Main function to initialize and run the agent's loop."""
    log_debug("--- Agent main() function entered ---")
    try:
        config = load_config()
        credentials = get_credentials(KEY_FILE_PATH, config['INGEST_FUNCTION_URL'])
        http_session = requests.Session()
        log_debug("Initialization successful.")
    except Exception as e:
        log_debug(f"Initialization failed with exception: {e}. Exiting.")
        exit(1)
        
    log_debug(f"Agent configured for server_id: {config['SERVER_ID']}")
    
    log_debug("Entering main while True loop...")
    while True:
        try:
            log_debug("Top of main loop.")
            metrics = collect_metrics()
            payload = {
                "server_id": config['SERVER_ID'],
                "metrics": metrics
            }
            
            log_debug("Refreshing auth token...")
            auth_req = google.auth.transport.requests.Request(session=http_session)
            credentials.refresh(auth_req)
            log_debug("Auth token refreshed.")

            headers = {
                'Authorization': f'Bearer {credentials.token}',
                'Content-Type': 'application/json'
            }
            
            log_debug(f"Making POST request to {config['INGEST_FUNCTION_URL']} with payload: {json.dumps(payload)}")
            
            response = http_session.post(
                config['INGEST_FUNCTION_URL'], 
                json=payload, 
                headers=headers, 
                timeout=15
            )
            
            response.raise_for_status()
            log_debug(f"Request successful. Status: {response.status_code}")

        except Exception as e:
            log_debug(f"ERROR: An error occurred in the main loop: {e}")
            log_debug(traceback.format_exc())
        
        sleep_interval = int(config.get('INTERVAL_SECONDS', 60))
        log_debug(f"Sleeping for {sleep_interval} seconds...")
        time.sleep(sleep_interval)

# --- Script Entry Point ---
if __name__ == "__main__":
    # Clear the log file on each start for a clean slate
    if os.path.exists(LOG_FILE_PATH):
        os.remove(LOG_FILE_PATH)
    log_debug("--- NoirNote Metrics Agent Script Started ---")
    main()
    log_debug("--- SCRIPT IS EXITING UNEXPECTEDLY ---") # This line should never be reached

